Source of truth for our grammar:

//todo: fix grammar to reflect new changes

program: header entity+ entity_group* shift+ shift_group* transformation*; ';';
header: ‘Title:’ TEXT ';
entity: ‘Entity’ ENTITY_NAME ';';
entity_group: ‘Entity group’ ENTITY_GROUP_NAME ':' ENTITY_NAME+ ';';

shift: ‘Shift:’ SHIFT_NAME IS DATE TIME '-' DATE TIME;
shift_group: 'Shift Group' SHIFT_GROUP_NAME ':' SHIFT_NAME (COMMA SHIFT_NAME)* ';';

logical_operator: 'AND' | 'OR' | 'XOR';
bitwise_operator: >> | <<;

transformation: ((apply | merge | loop) ';') | ifthenelse;
cond_transformations: transformation*;

apply: 'Apply' SHIFT_GROUP_OR_MERGE_GROUP_NAME 'to' ENTITY_OR_ENTITY_GROUP_NAME (bitwise_operator NUM)?;
merge: 'Merge' MERGE_GROUP_NAME ':' SHIFT_GROUP_OR_MERGE_GROUP_NAME logical_operator SHIFT_GROUP_OR_MERGE_GROUP_NAME;
loop: 'Loop' SHIFT_GROUP_OR_MERGE_GROUP_NAME 'over' ENTITY_GROUP_NAME bitwise_operator NUM 'each person' ('and repeat' NUM 'times')?;

ifthenelse: 'if' cond '{'
                    thenblock=cond_transformations
                '} else {'
                    elseblock=cond_transformations
                '}';

cond: '(' SHIFT_GROUP_OR_MERGE_GROUP_NAME logical_operator SHIFT_GROUP_OR_MERGE_GROUP_NAME');

TEXT: [a-zA-Z ]+;
COMMA: ',';

TIME: ([01]?[0-9]|2[0-3]):[0-5][0-9];

DATE: [0-2][0-9]\/[0-3][0-9]\/[0-9]{2}(?:[0-9]{2})?
NUM: [0-9]+;

ENTITY_NAME: TEXT;
ENTITY_GROUP_NAME: TEXT;
SHIFT_NAME: TEXT;
SHIFT_GROUP_NAME: TEXT;
MERGE_GROUP_NAME: TEXT;
SHIFT_GROUP_OR_MERGE_GROUP_NAME: TEXT;